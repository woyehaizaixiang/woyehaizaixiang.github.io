# 本数据源用于保存本站算法索引地址
# 
# 格式
# -
#  title: 算法标题
#  description: 描述
#  url: 文章链接
#  type: 算法类型
#  image: 演示动图，无演示则不添加
#  typeinfo: 类型描述，仅第一次出现类型时添加

-
  title: 插入排序
  description: 遍历数组，将每个元素逐个插入到已排序的数组中
  url: /posts/Sort-Algorithms.html#%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F
  type: 排序
  image: /images/posts/ten_sort_algorithm/insertion_sort.gif
  typeinfo: 排序指将一组无序的记录序列调整为有序的记录序列。若不需要访问外存，则称为“内部排序”。若参加排序的记录数量很大，无法仅在内存中完成，则称为“外部排序”。

-
  title: 希尔排序
  description: 将数组按照一定步长拆分为相互间隔的多组数组，对每组数组进行插入排序
  url: /posts/Sort-Algorithms.html#%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F
  type: 排序
  image: /images/posts/ten_sort_algorithm/shell_sort.gif
  typeinfo: 

-
  title: 选择排序
  description: 遍历未排序的数组，选择其中的最小值，与已排序数组的后面一位元素交换
  url: /posts/Sort-Algorithms.html#%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F
  type: 排序
  image: /images/posts/ten_sort_algorithm/selection_sort.gif
  typeinfo: 

-
  title: 堆排序
  description: 将未排序数组变成堆，取出堆顶放入已排序数组
  url: /posts/Sort-Algorithms.html#%E5%A0%86%E6%8E%92%E5%BA%8F
  type: 排序
  image: /images/posts/ten_sort_algorithm/heap_sort.gif
  typeinfo: 

-
  title: 冒泡排序
  description: 每一次遍历数组时将最大的元素推向数组末端直至完成排序
  url: /posts/Sort-Algorithms.html#%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F
  type: 排序
  image: /images/posts/ten_sort_algorithm/bubble_sort.gif
  typeinfo: 

-
  title: 鸡尾酒排序
  description: 左右同时遍历数组，将最大元素推向右端，最小元素推向左端
  url: /posts/Sort-Algorithms.html#%E9%B8%A1%E5%B0%BE%E9%85%92%E6%8E%92%E5%BA%8F%E5%8F%8C%E5%90%91%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F
  type: 排序
  image: /images/posts/ten_sort_algorithm/cocktail_sort.gif
  typeinfo: 

-
  title: 快速排序
  description: 选取一个数，把比它小的放在它的左边，比它大的放在它的左边！
  url: /posts/Sort-Algorithms.html#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F
  type: 排序
  image: /images/posts/ten_sort_algorithm/fast_sort.gif
  typeinfo: 

-
  title: 归并排序
  description: 分而治之，把数组分成两半，先排左边一半，再排右边半，然后整理并合起来
  url: /posts/Sort-Algorithms.html#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F
  type: 排序
  image: /images/posts/ten_sort_algorithm/merge_sort.gif
  typeinfo: 

-
  title: 基数排序
  description: 对所有数据的各个位数使用容器进行归类，从低到高，奇妙的排序方法
  url: /posts/Sort-Algorithms.html#%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F
  type: 排序
  image: /images/posts/ten_sort_algorithm/radix_sort.gif
  typeinfo: 

-
  title: A* 算法
  description: 通过启发函数引导算法的搜索方向，以求解两点间最短的有效路径
  url: https://www.cnblogs.com/21207-iHome/p/6048969.html
  type: 最短路径
  image: 
  typeinfo: 最短路径是计算某一节点到其他节点的最短距离，单一节点到其他节点的最短路径称为“单源最短路径”，任意节点到其他节点的最短路径称为“多源最短路径”。

-
  title: Dijkstra 算法
  description: 以起始点为中心向外层层扩展，直到扩展到终点为止
  url: https://baike.baidu.com/item/迪克斯特拉算法
  type: 最短路径
  image: 
  typeinfo: 

-
  title: Floyd 算法
  description: 利用动态规划的思想寻找给定的加权图中多源点之间最短路径
  url: https://baike.baidu.com/item/Floyd算法
  type: 最短路径
  image: 
  typeinfo: 

-
  title: Prim 算法
  description: 寻找与已生成的局部最小生成树所连通的路径权值最小的点，并将其加入最小生成树中
  url: https://baike.baidu.com/item/prim
  type: 最小生成树
  image: 
  typeinfo: 最小生成树指一个连通图的**最小权重生成树**，即原图的极小连通子图，且包含原图中的所有结点，并且有保持图连通的最少的边，且这些边的权值的和最小。

-
  title: Kruskal 算法
  description: 将权值最小的边一一连接起来，成环则换下一条
  url: https://baike.baidu.com/item/克鲁斯卡尔算法
  type: 最小生成树
  image: 
  typeinfo: 

-
  title: KMP 算法
  description: 利用匹配失败后的信息，尽量减少模式串与主串的匹配次数
  url: https://baike.baidu.com/item/kmp算法
  type: 字符串匹配
  image: /images/posts/KMP-alogrithm/kmp1.gif
  typeinfo: 字符串匹配问题就是在一个大的字符串 String 中搜索某个字符串 Pattern 的所出现位置，包括所有出现的位置和最先/最后出现的位置。

-
  title: Sunday 算法
  description: 在匹配过程中，模式串发现不匹配时，算法能跳过尽可能多的字符以进行下一步的匹配
  url: https://baike.baidu.com/item/sunday%20算法
  type: 字符串匹配
  image: /images/posts/KMP-alogrithm/sunday-algorithm.gif
  typeinfo: 
